{"ast":null,"code":"var _jsxFileName = \"/Users/byndasma/Documents/CODING/UDEMY/REACT/local-joe/src/components/payment-form/payment-form.component.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useSelector } from 'react-redux';\nimport { selectCartTotal } from '../../store/cart/cart.selector';\nimport { selectCurrentUser } from '../../store/user/user.selector';\nimport { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport { PaymentFormContainer, FormContainer, PaymentButton } from './payment-form.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ifValidCardElement = card => card !== null;\n\nconst PaymentForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessingPayment(true);\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: amount * 100\n      })\n    }).then(res => res.json());\n    const {\n      paymentIntent: {\n        client_secret\n      }\n    } = response;\n    const cardDetails = elements.getElement(CardElement);\n    if (!ifValidCardElement(cardDetails)) return;\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\n      payment_method: {\n        card: cardDetails,\n        billing_details: {\n          name: currentUser ? currentUser.displayName : 'Guest'\n        }\n      }\n    });\n    setIsProcessingPayment(false);\n\n    if (paymentResult.error) {\n      alert(paymentResult.error);\n    } else {\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('Payment Successful');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PaymentFormContainer, {\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: paymentHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Credit Card Payment: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PaymentButton, {\n        isLoading: isProcessingPayment,\n        buttonType: BUTTON_TYPE_CLASSES.inverted,\n        children: \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaymentForm, \"zeZvNGpoSXJVIJ/CUzfiu8Kc5to=\", false, function () {\n  return [useStripe, useElements, useSelector, useSelector];\n});\n\n_c = PaymentForm;\nexport default PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["/Users/byndasma/Documents/CODING/UDEMY/REACT/local-joe/src/components/payment-form/payment-form.component.tsx"],"names":["useState","CardElement","useStripe","useElements","useSelector","selectCartTotal","selectCurrentUser","BUTTON_TYPE_CLASSES","PaymentFormContainer","FormContainer","PaymentButton","ifValidCardElement","card","PaymentForm","stripe","elements","amount","currentUser","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","then","res","json","paymentIntent","client_secret","cardDetails","getElement","paymentResult","confirmCardPayment","payment_method","billing_details","name","displayName","error","alert","status","inverted"],"mappings":"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","sourcesContent":["import { useState, FormEvent } from 'react';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\nimport { StripeCardElement } from '@stripe/stripe-js';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectCartTotal } from '../../store/cart/cart.selector';\r\nimport { selectCurrentUser } from '../../store/user/user.selector';\r\n\r\nimport { BUTTON_TYPE_CLASSES } from '../button/button.component';\r\n\r\nimport {\r\n  PaymentFormContainer,\r\n  FormContainer,\r\n  PaymentButton,\r\n} from './payment-form.styles';\r\n\r\nconst ifValidCardElement = (\r\n  card: StripeCardElement | null\r\n): card is StripeCardElement => card !== null;\r\n\r\nconst PaymentForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const amount = useSelector(selectCartTotal);\r\n  const currentUser = useSelector(selectCurrentUser);\r\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\r\n\r\n  const paymentHandler = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n\r\n    setIsProcessingPayment(true);\r\n\r\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ amount: amount * 100 }),\r\n    }).then((res) => res.json());\r\n\r\n    const {\r\n      paymentIntent: { client_secret },\r\n    } = response;\r\n\r\n    const cardDetails = elements.getElement(CardElement);\r\n\r\n    if (!ifValidCardElement(cardDetails)) return;\r\n\r\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\r\n      payment_method: {\r\n        card: cardDetails,\r\n        billing_details: {\r\n          name: currentUser ? currentUser.displayName : 'Guest',\r\n        },\r\n      },\r\n    });\r\n\r\n    setIsProcessingPayment(false);\r\n\r\n    if (paymentResult.error) {\r\n      alert(paymentResult.error);\r\n    } else {\r\n      if (paymentResult.paymentIntent.status === 'succeeded') {\r\n        alert('Payment Successful');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PaymentFormContainer>\r\n      <FormContainer onSubmit={paymentHandler}>\r\n        <h2>Credit Card Payment: </h2>\r\n        <CardElement />\r\n        <PaymentButton\r\n          isLoading={isProcessingPayment}\r\n          buttonType={BUTTON_TYPE_CLASSES.inverted}\r\n        >\r\n          Pay now\r\n        </PaymentButton>\r\n      </FormContainer>\r\n    </PaymentFormContainer>\r\n  );\r\n};\r\n\r\nexport default PaymentForm;\r\n"]},"metadata":{},"sourceType":"module"}