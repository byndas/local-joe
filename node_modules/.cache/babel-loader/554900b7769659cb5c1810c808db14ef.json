{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: 'AIzaSyDDU4V-_QV3M8GyhC9SVieRTDM4dbiT0Yk',\n  authDomain: 'crwn-clothing-db-98d4d.firebaseapp.com',\n  projectId: 'crwn-clothing-db-98d4d',\n  storageBucket: 'crwn-clothing-db-98d4d.appspot.com',\n  messagingSenderId: '626766232035',\n  appId: '1:626766232035:web:506621582dab103a4d08d6'\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log('done');\n};\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, 'categories');\n  const q = query(collectionRef);\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(docSnapshot => docSnapshot.data());\n};\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error);\n    }\n  }\n\n  return userSnapshot;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = onAuthStateChanged(auth, userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};","map":{"version":3,"sources":["/Users/byndasma/Documents/CODING/UDEMY/REACT/local-joe/src/utils/firebase/firebase.utils.ts"],"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","docs","map","docSnapshot","data","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback","getCurrentUser","Promise","resolve","reject","unsubscribe"],"mappings":"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","sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport {\r\n  getAuth,\r\n  signInWithRedirect,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n  NextOrObserver,\r\n  User,\r\n} from 'firebase/auth';\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  collection,\r\n  writeBatch,\r\n  query,\r\n  getDocs,\r\n  QueryDocumentSnapshot,\r\n} from 'firebase/firestore';\r\n\r\nimport { Category } from '../../store/categories/category.types';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyDDU4V-_QV3M8GyhC9SVieRTDM4dbiT0Yk',\r\n  authDomain: 'crwn-clothing-db-98d4d.firebaseapp.com',\r\n  projectId: 'crwn-clothing-db-98d4d',\r\n  storageBucket: 'crwn-clothing-db-98d4d.appspot.com',\r\n  messagingSenderId: '626766232035',\r\n  appId: '1:626766232035:web:506621582dab103a4d08d6',\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\ngoogleProvider.setCustomParameters({\r\n  prompt: 'select_account',\r\n});\r\n\r\nexport const auth = getAuth();\r\nexport const signInWithGooglePopup = () =>\r\n  signInWithPopup(auth, googleProvider);\r\nexport const signInWithGoogleRedirect = () =>\r\n  signInWithRedirect(auth, googleProvider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport type ObjectToAdd = {\r\n  title: string;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async <T extends ObjectToAdd>(\r\n  collectionKey: string,\r\n  objectsToAdd: T[]\r\n): Promise<void> => {\r\n  const collectionRef = collection(db, collectionKey);\r\n  const batch = writeBatch(db);\r\n\r\n  objectsToAdd.forEach((object) => {\r\n    const docRef = doc(collectionRef, object.title.toLowerCase());\r\n    batch.set(docRef, object);\r\n  });\r\n\r\n  await batch.commit();\r\n  console.log('done');\r\n};\r\n\r\nexport const getCategoriesAndDocuments = async (): Promise<Category[]> => {\r\n  const collectionRef = collection(db, 'categories');\r\n  const q = query(collectionRef);\r\n\r\n  const querySnapshot = await getDocs(q);\r\n  return querySnapshot.docs.map(\r\n    (docSnapshot) => docSnapshot.data() as Category\r\n  );\r\n};\r\n\r\nexport type AdditionalInformation = {\r\n  displayName?: string;\r\n};\r\n\r\nexport type UserData = {\r\n  createdAt: Date;\r\n  displayName: string;\r\n  email: string;\r\n};\r\n\r\nexport const createUserDocumentFromAuth = async (\r\n  userAuth: User,\r\n  additionalInformation = {} as AdditionalInformation\r\n): Promise<void | QueryDocumentSnapshot<UserData>> => {\r\n  if (!userAuth) return;\r\n\r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n\r\n  const userSnapshot = await getDoc(userDocRef);\r\n\r\n  if (!userSnapshot.exists()) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalInformation,\r\n      });\r\n    } catch (error) {\r\n      console.log('error creating the user', error);\r\n    }\r\n  }\r\n\r\n  return userSnapshot as QueryDocumentSnapshot<UserData>;\r\n};\r\n\r\nexport const createAuthUserWithEmailAndPassword = async (\r\n  email: string,\r\n  password: string\r\n) => {\r\n  if (!email || !password) return;\r\n\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (\r\n  email: string,\r\n  password: string\r\n) => {\r\n  if (!email || !password) return;\r\n\r\n  return await signInWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signOutUser = async () => await signOut(auth);\r\n\r\nexport const onAuthStateChangedListener = (callback: NextOrObserver<User>) =>\r\n  onAuthStateChanged(auth, callback);\r\n\r\nexport const getCurrentUser = (): Promise<User | null> => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = onAuthStateChanged(\r\n      auth,\r\n      (userAuth) => {\r\n        unsubscribe();\r\n        resolve(userAuth);\r\n      },\r\n      reject\r\n    );\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}