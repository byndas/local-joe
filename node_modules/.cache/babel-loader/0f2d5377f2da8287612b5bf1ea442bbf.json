{"ast":null,"code":"import { CART_ACTION_TYPES } from './cart.types';\nimport { createAction, withMatcher } from '../../utils/reducer/reducer.utils';\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is equal to 1, if it is remove that item from the cart\n\n  if (existingCartItem && existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // return back cartitems with matching cart item with reduced quantity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nexport const setIsCartOpen = withMatcher(boolean => createAction(CART_ACTION_TYPES.SET_IS_CART_OPEN, boolean));\nexport const setCartItems = withMatcher(cartItems => createAction(CART_ACTION_TYPES.SET_CART_ITEMS, cartItems));\nexport const addItemToCart = (cartItems, productToAdd) => {\n  const newCartItems = addCartItem(cartItems, productToAdd);\n  return setCartItems(newCartItems);\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n  return setCartItems(newCartItems);\n};\nexport const clearItemFromCart = (cartItems, cartItemToClear) => {\n  const newCartItems = clearCartItem(cartItems, cartItemToClear);\n  return setCartItems(newCartItems);\n};","map":{"version":3,"sources":["/Users/byndasma/Documents/CODING/UDEMY/REACT/local-joe/src/store/cart/cart.action.ts"],"names":["CART_ACTION_TYPES","createAction","withMatcher","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","setIsCartOpen","boolean","SET_IS_CART_OPEN","setCartItems","SET_CART_ITEMS","addItemToCart","newCartItems","removeItemFromCart","clearItemFromCart"],"mappings":"AACA,SAASA,iBAAT,QAA4C,cAA5C;AACA,SACEC,YADF,EAEEC,WAFF,QAKO,mCALP;;AAOA,MAAMC,WAAW,GAAG,CAClBC,SADkB,EAElBC,YAFkB,KAGH;AACf,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACtBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBJ,YAAY,CAACI,EADpB,CAAzB;;AAIA,MAAIH,gBAAJ,EAAsB;AACpB,WAAOF,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,KAAgBJ,YAAY,CAACI,EAA7B,GACI,EAAE,GAAGD,QAAL;AAAeG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,KADJ,GAEIH,QAHC,CAAP;AAKD;;AAED,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,YAAL;AAAmBM,IAAAA,QAAQ,EAAE;AAA7B,GAAf,CAAP;AACD,CAjBD;;AAmBA,MAAMC,cAAc,GAAG,CACrBR,SADqB,EAErBS,gBAFqB,KAGN;AACf;AACA,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACtBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB,CAFe,CAMf;;AACA,MAAIH,gBAAgB,IAAIA,gBAAgB,CAACK,QAAjB,KAA8B,CAAtD,EAAyD;AACvD,WAAOP,SAAS,CAACU,MAAV,CAAkBN,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAhE,CAAP;AACD,GATc,CAWf;;;AACA,SAAOL,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,GACI,EAAE,GAAGD,QAAL;AAAeG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,GADJ,GAEIH,QAHC,CAAP;AAKD,CApBD;;AAsBA,MAAMO,aAAa,GAAG,CACpBX,SADoB,EAEpBY,eAFoB,KAIpBZ,SAAS,CAACU,MAAV,CAAkBN,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBO,eAAe,CAACP,EAA/D,CAJF;;AAgBA,OAAO,MAAMQ,aAAa,GAAGf,WAAW,CACrCgB,OAAD,IACEjB,YAAY,CAACD,iBAAiB,CAACmB,gBAAnB,EAAqCD,OAArC,CAFwB,CAAjC;AAKP,OAAO,MAAME,YAAY,GAAGlB,WAAW,CACpCE,SAAD,IACEH,YAAY,CAACD,iBAAiB,CAACqB,cAAnB,EAAmCjB,SAAnC,CAFuB,CAAhC;AAKP,OAAO,MAAMkB,aAAa,GAAG,CAC3BlB,SAD2B,EAE3BC,YAF2B,KAGxB;AACH,QAAMkB,YAAY,GAAGpB,WAAW,CAACC,SAAD,EAAYC,YAAZ,CAAhC;AACA,SAAOe,YAAY,CAACG,YAAD,CAAnB;AACD,CANM;AAQP,OAAO,MAAMC,kBAAkB,GAAG,CAChCpB,SADgC,EAEhCS,gBAFgC,KAG7B;AACH,QAAMU,YAAY,GAAGX,cAAc,CAACR,SAAD,EAAYS,gBAAZ,CAAnC;AACA,SAAOO,YAAY,CAACG,YAAD,CAAnB;AACD,CANM;AAQP,OAAO,MAAME,iBAAiB,GAAG,CAC/BrB,SAD+B,EAE/BY,eAF+B,KAG5B;AACH,QAAMO,YAAY,GAAGR,aAAa,CAACX,SAAD,EAAYY,eAAZ,CAAlC;AACA,SAAOI,YAAY,CAACG,YAAD,CAAnB;AACD,CANM","sourcesContent":["import { CategoryItem } from '../categories/category.types';\r\nimport { CART_ACTION_TYPES, CartItem } from './cart.types';\r\nimport {\r\n  createAction,\r\n  withMatcher,\r\n  Action,\r\n  ActionWithPayload,\r\n} from '../../utils/reducer/reducer.utils';\r\n\r\nconst addCartItem = (\r\n  cartItems: CartItem[],\r\n  productToAdd: CategoryItem\r\n): CartItem[] => {\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === productToAdd.id\r\n  );\r\n\r\n  if (existingCartItem) {\r\n    return cartItems.map((cartItem) =>\r\n      cartItem.id === productToAdd.id\r\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n        : cartItem\r\n    );\r\n  }\r\n\r\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\r\n};\r\n\r\nconst removeCartItem = (\r\n  cartItems: CartItem[],\r\n  cartItemToRemove: CartItem\r\n): CartItem[] => {\r\n  // find the cart item to remove\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === cartItemToRemove.id\r\n  );\r\n\r\n  // check if quantity is equal to 1, if it is remove that item from the cart\r\n  if (existingCartItem && existingCartItem.quantity === 1) {\r\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\r\n  }\r\n\r\n  // return back cartitems with matching cart item with reduced quantity\r\n  return cartItems.map((cartItem) =>\r\n    cartItem.id === cartItemToRemove.id\r\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\r\n      : cartItem\r\n  );\r\n};\r\n\r\nconst clearCartItem = (\r\n  cartItems: CartItem[],\r\n  cartItemToClear: CartItem\r\n): CartItem[] =>\r\n  cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\r\n\r\nexport type SetIsCartOpen = ActionWithPayload<\r\n  CART_ACTION_TYPES.SET_IS_CART_OPEN,\r\n  boolean\r\n>;\r\n\r\nexport type SetCartItems = ActionWithPayload<\r\n  CART_ACTION_TYPES.SET_CART_ITEMS,\r\n  CartItem[]\r\n>;\r\n\r\nexport const setIsCartOpen = withMatcher(\r\n  (boolean: boolean): SetIsCartOpen =>\r\n    createAction(CART_ACTION_TYPES.SET_IS_CART_OPEN, boolean)\r\n);\r\n\r\nexport const setCartItems = withMatcher(\r\n  (cartItems: CartItem[]): SetCartItems =>\r\n    createAction(CART_ACTION_TYPES.SET_CART_ITEMS, cartItems)\r\n);\r\n\r\nexport const addItemToCart = (\r\n  cartItems: CartItem[],\r\n  productToAdd: CategoryItem\r\n) => {\r\n  const newCartItems = addCartItem(cartItems, productToAdd);\r\n  return setCartItems(newCartItems);\r\n};\r\n\r\nexport const removeItemFromCart = (\r\n  cartItems: CartItem[],\r\n  cartItemToRemove: CartItem\r\n) => {\r\n  const newCartItems = removeCartItem(cartItems, cartItemToRemove);\r\n  return setCartItems(newCartItems);\r\n};\r\n\r\nexport const clearItemFromCart = (\r\n  cartItems: CartItem[],\r\n  cartItemToClear: CartItem\r\n) => {\r\n  const newCartItems = clearCartItem(cartItems, cartItemToClear);\r\n  return setCartItems(newCartItems);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}